{"version":3,"sources":["components/Game.js","wordspell.png","wordspell-dark.png","components/ThemeToggle.js","components/Navbar.js","components/Intro.js","components/App.js","index.js"],"names":["Game","useState","word","setWord","answer","setAnswer","isCorrect","setIsCorrect","attempts","setAttempts","handleChange","event","ans","letterId","parseInt","target","id","slice","value","map","letter","index","toLowerCase","checkCorrect","next","document","getElementById","focus","handleNext","fetch","then","res","json","result","normalize","replace","char","isPreset","definition","pronunciation","useEffect","className","readOnly","onChange","autoComplete","onClick","length","ThemeToggle","props","state","toggle","_dark","dark","root","documentElement","classList","add","remove","setDark","window","matchMedia","type","checked","htmlFor","Navbar","href","src","logo","alt","logoDark","Intro","setStarted","App","started","ReactDOM","render"],"mappings":"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","file":"static/js/main.c66cbf78.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport '../style/Game.css';\n\nfunction Game (){\n\n    const [word, setWord] = useState(null);\n    const [answer, setAnswer] = useState();\n    const [isCorrect, setIsCorrect] = useState(false);\n    const [attempts, setAttempts] = useState(0);\n\n\n    useEffect(()=>{\n        handleNext();\n    }, \n    // eslint-disable-next-line\n    []);\n\n    function fetchWord(){\n        fetch('https://random-words-api.vercel.app/word').then((res)=> res.json()).then(\n            (result)=>{\n                        let word = result[0].word.normalize('NFD').replace(/\\p{Diacritic}/gu,\"\").toLowerCase();\n                        let answer= [...word].map(\n                            (char, index)=>{\n                                return({\n                                value: (index===0)?char:null,\n                                isPreset: index===0,\n                                isCorrect: index===0,\n                                })\n                            }\n                        );\n\n                        setWord({\n                            word: word,\n                            definition: result[0].definition,\n                            pronunciation: result[0].pronunciation,\n                        });\n\n                        setAnswer(answer);\n\n                        setIsCorrect(false);\n\n                    }\n        )\n    }\n\n    function handleChange(event){\n        let ans = answer;\n        const letterId = parseInt(event.target.id.slice(-1))\n        ans[letterId].value = event.target.value.slice(-1);\n        setAnswer(ans);\n        checkCorrect();\n\n        if(event.target.value !== '') setAttempts(attempts+1);\n\n        if(event.target.value.slice(-1).toLowerCase() === word.word[parseInt(event.target.id.slice(-1))]){\n            let next = document.getElementById(`letter${letterId+1}`);\n            if(next) next.focus();\n        }\n    }\n\n\n    function checkCorrect(){\n        let isCorrect = true;\n        let ans = answer.map(\n            (letter, index) => {\n                if(letter.value?.toLowerCase() === word.word[index]){\n                    letter.isCorrect = true;\n                    return(letter);\n                }else{\n                    isCorrect = false;\n                    return(letter);\n                }\n            }\n        )\n        setAnswer(ans);\n        setIsCorrect(isCorrect);\n    }\n\n    function handleNext(){\n        setWord(null);\n        fetchWord();\n        document.getElementById('letter1')?.focus();\n    }\n\n    return(\n        <div id=\"game_board\">\n            {(word)?\n            <>\n                <div className='attempts'>\n                    <p>Attempts: {attempts}</p>\n                </div>\n                <div id=\"word\">\n                    {answer?.map(\n                        (letter, index) => {\n                            return(\n                                <input \n                                    key={index} \n                                    id={`letter${index}`} \n                                    value={(letter.value)?letter.value:\"\"} \n                                    readOnly={letter.isCorrect || letter.isPreset} \n                                    onChange={handleChange} \n                                    className={letter.isPreset?\"preset\":letter.isCorrect?\"correct\":\"not_correct\"}\n                                    autoComplete=\"off\"\n                                />\n                            )\n                        }\n                    )}\n                </div>\n\n                <div id=\"meaning\">\n                    <p id=\"label\">Meaning</p>\n                    <p>{word.definition}</p>\n                </div>\n\n                <button className=\"button\" onClick={handleNext}>{isCorrect?'Next':'Skip'}</button>\n                \n                <div id=\"won\">\n                    {(isCorrect)?\n                        <>\n                            <p id=\"congrats\">Congratulations ðŸŽ‰</p>\n                            <p>{(attempts === word.word.length)? \"Perfect\" : `you took ${attempts} attemps`}</p>\n                            <p id=\"pronaunaciation\">It's pronounced /{word.pronunciation}/</p>\n                        </>\n                        :<></>\n                    }\n                </div>\n\n            </>\n    :\n            <div className=\"loading\">\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>}\n        </div>\n        );\n\n}\n\nexport default Game;\n","export default __webpack_public_path__ + \"static/media/wordspell.ba6684bd.png\";","export default __webpack_public_path__ + \"static/media/wordspell-dark.b1fae1f6.png\";","import { useEffect } from 'react';\n\nfunction ThemeToggle(props){\n\n    const state = props.state;\n\n    function toggle(_dark){\n        let dark;\n        if(typeof(_dark) === 'boolean'){\n            dark = _dark;\n        }else {\n            dark = !state.dark;\n        }\n        const root = document.documentElement\n        dark ? root.classList.add('dark') : root.classList.remove('dark' );\n        state.setDark(dark);\n    }\n\n    \n    useEffect(()=>{\n        if(window.matchMedia('prefer-color-scheme: dark')) toggle(true);  \n    }, \n    // eslint-disable-next-line\n    []);\n\n    return(\n        <div className='theme-toggle'>\n            <span>ðŸŒ—</span>\n            <input id='theme-toggle' type={'checkbox'} checked={state.dark} onClick={toggle} readOnly={true}/>\n            <label htmlFor='theme-toggle'></label>\n        </div>\n    );\n}\n\nexport default ThemeToggle;","import logo from '../wordspell.png';\nimport logoDark from '../wordspell-dark.png';\nimport ThemeToggle from './ThemeToggle';\nimport '../style/Navbar.css';\n\nfunction Navbar(props) {\n\n    const state = props.state;\n\n    return(\n        <nav>\n            <div className='logo-container'>\n                <a href='/'>\n                    <img src={ logo } className='logo' alt='WS' />\n                    <img src={ logoDark } className='logo dark' alt='WS' />\n                </a>\n            </div>\n            <ThemeToggle state={state}/>\n        </nav>\n    );\n}\n\nexport default Navbar;","import '../style/Intro.css';\n\nfunction Intro(props){\n\n    const state = props.state;\n\n    function start(){\n        state.setStarted(true);\n    }\n\n    return(\n        <div className=\"intro\">\n            <h1>Welcome to WordSpell</h1>\n            <p>wordspell is a simple spelling game <br />\n            your only clues are the first letter and the meaning of the word.</p>\n            <p>Have fun!</p>\n            <button className='button start' onClick={start}>Start</button>\n        </div>\n    );\n}\n\nexport default Intro;","import Game from \"./Game\";\nimport Navbar from './Navbar';\nimport Intro from './Intro';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [dark, setDark] = useState(false);\n  const [started, setStarted] = useState(false);\n\n  const state = {\n    dark,\n    setDark,\n    started,\n    setStarted\n  }\n\n  return (\n    <>\n      <Navbar state={state} />\n      {started? <Game /> : <Intro state={state} />}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './style/style.css';\nimport './style/loading.css';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}